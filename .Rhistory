)
library(ISwR)
icome
income
data(Income)
y <- rnorm(100)
x <- rnrom(100)
x <- rnorm(100)
plot(x,y)
plot(x,y,xlab=" this is the x-axis",ylab=" this is the y-axis",
main=" Plot of X vs Y")
x=seq (1 ,10)
y <- x
f<- outer(x,y,function (x,y)cos(y)/(1+x^2))
f
contour (x,y,f)
contour (x,y,f,nlevels =45, add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa ,theta =30)
data(Auto)
Auto = read.table("Auto")
Auto <- read.table("Auto.data")
library(ISwR)
Auto <- read.table("Auto.data")
data("Auto")
library(ISLR)
install.packages(ISLR)
install.packages("ISLR")
library(swirl)
swirl()
install_from_swirl("R Programming Alt")
swirl()
5+7
x <- 5+7
x
x-3
y <- x-3
y
quite()
q()
library(swirl)
swirl()
swirl()
install_from_swirl("Data Analysis")
ininstall_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Mathematical Biostatistics Boot Camp")
uninstall_course("R Programming")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
swirl()
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
10
25
nxy(9)
nxy()
nxt()
4
summary(cars$price)
c(1.1,0,3.14)
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14
)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my
my_div
library(swirl)
swirl()
swirl()
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My name is"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "fede")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X","Y","Z"), sep = "")
paste(LETTERS,1:4, sep = "-")
siwrl()
swirl()
q()
library(swirl)
fede
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
tbl_df
play()
?tbl_df
nxt()
tbl_df
cran
?select
select(cran,ip_id,package,coutnry)
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:11))
select(cran, -(x:size))
select(cran, -(2:size))
select(cran, -(1:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN" | country == "US")
filter(cran,  country == "IN" | country == "US")
filter(cran, size == 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
play()
filter(cran, nrow = 10)
filter(cran, nrow == 10)
?filter()
nxt()
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version != is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
args(select)
glimpse(cran2)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "edde1e11614f8c70f481",
secret = "8cb8bf4eee713d53711b5f06f5f617fdf8470e37")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "edde1e11614f8c70f481",
secret = "8cb8bf4eee713d53711b5f06f5f617fdf8470e37")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
rm(list = ls())
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "edde1e11614f8c70f481",
secret = "8cb8bf4eee713d53711b5f06f5f617fdf8470e37")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
test_server <- "http://had.co.nz"
rowMeans(replicate(20,
GET(handle = handle(test_server), path = "index.html")$times)
)
test_handle <- handle(test_server)
# Re use the same handle for multiple requests
rowMeans(replicate(20,
GET(handle = test_handle, path = "index.html")$times)
)
rowMeans(replicate(20,
GET(test_server, path = "index.html")$times)
)
x <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x <- x[sample(1:5),] ; x$var2[c(1,3)] = NA
x
x
sort(x$var1)
sort(x$var2)
sort(x$var2, na.last = T)
x[order(x$var1),]
library(dplyr)
args(arrange)
fileUrl <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g"
load(fileUrl)
fileUrl <- "httpshttps://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
load(fileUrl)
rest <- load(fileUrl)
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
rest <- load(fileUrl)
fileUrl <- "http://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
rest <- load(fileUrl)
rest <- read.csv(fileUrl)
View(rest)
head(rest, n = 3)
str(rest)
rest[rest$name %in% c("410","WENDY'S")]
rest[rest$name %in% c("410","WENDY'S"),]
xtabs(Freq ~ zipCode + name, data = rest)
xtabs(frequency ~ zipCode + name, data = rest)
?xtabs()
xtabs(Freq ~ zipCode + name, data = rest)
xtabs(neighborhood ~ zipCode + name, data = rest)
xtabs(sum ~ zipCode + name, data = rest)
warpbreaks
w <- warpbreaks
View(rest)
xtabs(sum(councilDistrict) ~ zipCode + name, data = rest)
xtabs(sum(councilDistrict~ zipCode + name, data = rest)
xtabs(councilDistrict~ zipCode + name, data = rest)
xtabs(breaks~.,data = warpbreaks)
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(cran, mean(size))
summarise(by_package, mean(size))
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
# select() the following columns from cran. Keep in mind
# that when you're using the chaining operator, you don't
# need to specify the name of the data tbl in your call to
# select().
#
# 1. ip_id
# 2. country
# 3. package
# 4. size
#
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
play()
nxt()
cran %>%
select() %>%
print
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit)
submit())
submit()
play()
?mutate
nxt()
submit()
submit()
submit()
submit()
submit()
submit()
exit()
bye()
exit()
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution[,1])
summary(pollution$pm25)
ppm <- pollution$pm25
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
play()
abile(h = 2.8*1.5)
abline(h = 2.8*1.5)
abline(h = 2.8*1.5+11.356012)
nxt()
hist(ppm, col = green)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = green, breaks = 100)
hist(ppm, col = "green", breaks = 100)
hist(ppm, col = "green")
rug(ppm)
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta}")
abline(v = median(ppm), col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution$pm25 ~ pollution$region, col = "red")
play()
abline(h = 12)
nxt()
boxplot(pollution$pm25 ~ pollution$region, col = "red")
boxplot(pm25 ~ region, data = pollution,  col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(data= pollution, region == 1)
east <- subset(data= pollution, pollution$region == 1)
east <- subset(x = pollution, region == 1)
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region = "west"), col = "green")
hist(subset(pollution, region = "west")$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,
| 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, meain = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
play()
dir()
file.remove("myplot.pdf")
getwd()
nxt()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
dir()
file.remove("geyserplot.png")
dev.cur()
file.remove("myplot.pdf")
library(swirl)
swirl()
str(mpg)
qplt(displ, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data =  mpg)
qplot(displ, hwy, data =  mpg, facets = drv)
qplot(displ, hwy, data =  mpg, color = drv)
qplot(displ, hwy, data =  mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data =  mpg, color = drv)
qplot(y=hwy, data =  mpg, color = drv)
myhigh
qplot(drv, hwy, data =  mpg, geom = "boxplot")
qplot(drv, hwy, data =  mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data =  mpg, drv)
qplot(hwy, data =  mpg, fill = drv)
qplot(hwy, data =  mpg, facets = .~drv)
qplot(displ, hwy, data =  mpg, facets = .~drv)
qplot(hwy, data =  mpg, facets = .~drv)
qplot(hwy, data =  mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
pre <- read.csv("C:/Users/Federico/Downloads/presupuesto-sancionado-2015.csv", header = T)
str(pre)
View(pre)
pre <- read.csv("C:/Users/Federico/Downloads/presupuesto-sancionado-2015.csv", header = T, sep = ";")
str(pre)
nameS(pre)
nameS(pre)
names(pre)
View(pre)
table(pre$ubicacion_geografica)
table(pre$desc_proyecto)
sum(pre$sancion)
sum(pre$sancion, na.rm = T)
any(pre$sancion)
any(is.na(pre$sancion))
sum(pre$sancion, na.rm = T)
sum(as.numeric(pre$sancion), na.rm = T)
sum(as.numeric(pre$sancion), na.rm = T) / sum(as.numeric(pre$vigente), na.rm = T)
dep <- aggregate(data = pre,  sancion ~ desc_entidad, FUN = sum)
dep <- aggregate(data = pre,  as.numeric(sancion) ~ desc_entidad, FUN = sum)
View(dep)
dep <- aggregate(data = pre,  as.numeric(sancion) ~ desc_servicio, FUN = sum)
dep <- aggregate(data = pre,  as.numeric(sancion) ~ descn_servicio, FUN = sum)
View(dep)
dep <- aggregate(data = pre,  as.numeric(sancion) + as.numeric(vigente) ~ descn_servicio, FUN = sum)
View(dep)
View(dep)
dep <- aggregate(data = pre,  c(as.numeric(sancion), as.numeric(vigente)) ~ descn_servicio, FUN = sum)
View(dep)
dep <- aggregate(data = pre,  cbind(as.numeric(sancion), as.numeric(vigente)) ~ descn_servicio, FUN = sum)
View(dep)
sum(dep$V1)
dep$v3 <- dep$V1+ dep$V2
dep$v3 <- dep$V1 / dep$V2
liibrary(ggplot2)
library(ggplot2)
qplot(data = pre, x = desn_servicio, y = v3, geom = "barchart")
qplot(data = pre, x = desn_servicio, y = v3, geom = "bar")
ggplot(data = pre, aes( x = desn_servicio, y = v3) + geom_bar()
ggplot(data = pre, aes( x = desn_servicio, y = v3)) + geom_bar()
ggplot(data = pre, aes(as.factor(desn_servicio))) + geom_bar(v3)
ggplot(data = pre, aes(as.factor(desn_servicio))) + geom_bar(aes(v3))
qplot(desn_servicio, data=dep, geom="bar", weight=v3, ylab="% de Gasto")
names(dep)
qplot(descn_servicio, data=dep, geom="bar", weight=v3, ylab="% de Gasto")
unzip(zipfile = activity)
setwd("C:/Users/Federico/Desktop/paraenviar/RepData_PeerAssessment1")
unzip(zipfile = activity)
unzip(zipfile = "activity.zip")
